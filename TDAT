#include <IntervalTimer.h>
#include <Math.h>

IntervalTimer myTimer;

volatile uint32_t send_cnt = 0;
volatile uint32_t check_cnt = 0;
bool toggle = false;

const int RX_BUFFER_SIZE = 100;
char rxData[RX_BUFFER_SIZE];
int rxIndex = 0;
char Send_Data[50];  // Adjust size as needed
bool comCheck = false;

// K-LD7 COMMAND
char cmd01[] = {0x49, 0x4E, 0x49, 0x54, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};  // INIT
char cmd02[] = {0x47, 0x4E, 0x46, 0x44, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00};  // GNFD + TDAT
char cmd03[] = {0x47, 0x42, 0x59, 0x45, 0x00, 0x00, 0x00, 0x00};  // GBYE

void TimerHandler() {
    if(send_cnt < 10000) send_cnt++;
    if(check_cnt < 10000) check_cnt++;
}

void setup() {
    pinMode(LED_BUILTIN, OUTPUT);

    Serial.begin(115200);
    Serial1.begin(115200, SERIAL_8E1);
    delay(1000);

    memset(rxData, 0, RX_BUFFER_SIZE);
    myTimer.begin(TimerHandler, 1000);  // Interval in microseconds
}

void processData() {
    char* index_no = strstr(rxData, "RESP");
    if(index_no == NULL) return;

    char* result = index_no + 9;
    char* tdat_index = strstr(result, "TDAT");

    if(tdat_index == NULL) {
        strcpy(Send_Data, "ERROR"); 
        return;
    }

    if(tdat_index[4] == 0) {
        strcpy(Send_Data, "NO MOVE");
        return;
    }

    if(tdat_index[4] == 0x08) {
        int calc_data[3];
        float calc_result[3];  // float 타입으로 변경

        for(int i = 0; i < 3; i++) {
            calc_data[i] = (int)((tdat_index[9+(i*2)] << 8) | tdat_index[8+(i*2)]);
            calc_result[i] = (float)((calc_data[i] & 0x8000) ? (((calc_data[i] ^ 0xffff) + 1) * -1) : calc_data[i]);
        }

        float angle = calc_result[1] / 100.0;
        float distance = (calc_result[0] / 100.0);
        float velocity = (calc_result[2] / 100.0) / 3.6;
        sprintf(Send_Data, "%.3f,%.3f,%.3f,%.3f,%.3f,1,0.175,0.065",
                                            velocity,
                                            distance * cos(angle), 
                                            distance * sin(angle), 
                                            velocity * cos(angle),
                                            velocity * sin(angle));
        return;
    }

    strcpy(Send_Data, "ERROR");
}

void loop() {
    if(send_cnt > 1000) {
        send_cnt = 0;
        check_cnt = 1000;

        digitalWrite(LED_BUILTIN, toggle);
        toggle ^= true;
        
        Serial1.write(cmd02, sizeof(cmd02));
        //Serial.write(cmd02, sizeof(cmd02)); //debug
    }

    if(check_cnt > 1300) {
        check_cnt = 0;

        while(Serial1.available()) {
            char rxChar = (char)Serial1.read();
            rxData[rxIndex++] = rxChar;
            if (rxIndex >= RX_BUFFER_SIZE - 1) break;
            comCheck = true;
        }
    }

    if(comCheck) {
        processData();
        Serial.println(Send_Data); 

        memset(rxData, 0, RX_BUFFER_SIZE);
        rxIndex = 0;
        comCheck = false;
    }
}
